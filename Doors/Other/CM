-- Wait For The Game
repeat
	task.wait()
until game:IsLoaded()

-- Services
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local TeleportService = game:GetService("TeleportService")

-- Modules
local Modifiers = require(ReplicatedStorage:WaitForChild("Modifiers"))
local AccessibleFloors = require(ReplicatedStorage:WaitForChild("AccessibleFloors"))

-- Place Check
if game.PlaceId == 6839171747 then
	local ModifierData = TeleportService:GetTeleportSetting("ModifierData")
	
	for Name, Data in pairs(ModifierData) do
		local ModifierFolder = Instance.new("Folder", ReplicatedStorage:WaitForChild("LiveModifiers"))
		ModifierFolder.Name = Name
		
		Modifiers.mods[Name] = Data
	end
	
	return
elseif game.PlaceId ~= 6516141723 and game.PlaceId ~= 12308344607 then
	return
end

-- Tables
local CustomModifiers = {}
local CategoryTable = {}
local FloorTable = {}
local FunctionTable = {
	GetInfo = function(Modifier)
		if Modifier.Merge ~= nil then
			if Modifier.Connect then
				return Modifier
			else
				local Extra1 = 0
				local Extra2 = 0
				
				for _, Mod in pairs(Modifiers.mods) do
					if Mod.Category == Modifier.Category and Mod.Merge == Modifier.Merge and Modifier.Merge ~= nil and math.abs(mod.Sort - Modifier.Sort) == 1 then
						if Mod.Sort - Modifier.Sort > 0 then
							Extra2 = -0.5
						else
							Extra1 = 0.5
						end
					end
				end
				
				Modifier.Connect = 0.5 + (Extra2 + Extra1)
			end
		end
		return Modifier
	end
}

-- Guis
local PlayerGui = Players.LocalPlayer.PlayerGui
local MainUI = PlayerGui:WaitForChild("MainUI")
local CreateElevator = MainUI:WaitForChild("LobbyFrame"):WaitForChild("CreateElevator")

-- Variables
local QueueTeleport = (syn and syn.queue_on_teleport) or queue_on_teleport or (fluxus and fluxus.queue_on_teleport)
local WaitingCode = [[
repeat
	task.wait()
until game:IsLoaded() and not game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui"):WaitForChild("LoadingUI").Enabled
]]

-- Global Variables
shared.EveryModifier = shared.EveryModifier or table.clone(Modifiers.mods)
shared.EveryCategory = shared.EveryCategory or table.clone(Modifiers.categories)
shared.EveryFloor = shared.EveryFloor or table.clone(AccessibleFloors)

shared.CustomModifiers = shared.CustomModifiers or {}
shared.CustomFloors = shared.CustomFloors or 101

shared.ToggleConnotations = false
shared.Teleported = false

-- Table Index
FunctionTable.__index = FunctionTable
FloorTable.__index = FloorTable
CategoryTable.__index = CategoryTable

-- Functions
function ReloadModifiers()
	task.spawn(function()
		local Environment = getsenv or getfenv
		Environment(MainUI.Initiator.Main_Lobby.UIStuff).doFloorStuff(0)
	end)
end

function Caption(Text)
	if getconnections then
		for _, Connection in pairs(getconnections(ReplicatedStorage.RemotesFolder.Caption.OnClientEvent)) do
			Connection.Function(Text)
		end
	end
end

function Connotation(Text)
	if shared.ToggleConnotations then
		Caption(Text)
	end
end

-- Other Functions
function CreateModifier(ModifierAttributes)
	return setmetatable({
		Category = ModifierAttributes.Category or "Default", 
		Name = ModifierAttributes.Title or "Modifier",
		Title = ModifierAttributes.Title or "Modifier",
		Desc = ModifierAttributes.Desc or "This probably does something, me meow.",
		Sort = ModifierAttributes.Sort or 99,
		Color = ModifierAttributes.Color or Color3.fromRGB(255, 222, 189),
		Bonus = ModifierAttributes.Bonus or 0,
		Penalties = ModifierAttributes.Penalties or {},
		Merge = ModifierAttributes.Merge or nil,
		Solo = ModifierAttributes.Solo or false,
		Unlock = ModifierAttributes.Unlock or nil,
		Activation = ModifierAttributes.Activation and (WaitingCode .. ModifierAttributes.Activation) or nil
	}, FunctionTable)
end

function CreateCategory(CategoryAttributes)
	return setmetatable({
		Name = CategoryAttributes.Name or "Example",
		sort = CategoryAttributes.Sort or 0,
		color = CategoryAttributes.Color or Color3.fromRGB(255, 222, 189)
	}, CategoryTable)
end

function CreateFloor(FloorAttributes)
	if not CreateElevator.Floors:FindFirstChild(FloorAttributes.Title or "[Floor]") then
		local newFloor = CreateElevator.Floors.Hotel:Clone()
		newFloor.Parent = CreateElevator.Floors
		newFloor.Name = FloorAttributes.Title or "[Floor]"
		newFloor.Text = FloorAttributes.Title or "[Floor]"
		newFloor.Background.Image = FloorAttributes.Image or ""
		newFloor.Font = FloorAttributes.Font or newFloor.Font
		newFloor.BackgroundColor3 = FloorAttributes.Theme or Color3.fromRGB(252, 219, 187)
		newFloor.TextColor3 = FloorAttributes.FontColor or Color3.fromRGB(255, 222, 189)
		newFloor.Visible = false
		shared.CustomFloors += 1
	end

	return setmetatable({
		Name = FloorAttributes.Title or "[Floor]",
		Title = FloorAttributes.Title or "[Floor]", 
		Requires = FloorAttributes.Requires or nil, 
		Sort = FloorAttributes.Sort or shared.CustomFloors, 
		Moddable = FloorAttributes.Moddable or false
	}, FloorTable)
end

-- Module Functions
function CustomModifiers:DeleteModifier(Modifier, All)
	if All then
		Modifiers.mods = {}
		Connotation("Deleted All Modifiers.")
	elseif Modifier and Modifiers.mods[Modifier] then
		Modifiers.mods[Modifier] = nil
		Connotation('Deleted Modifier "' .. Modifier .. '".')
	else
		Connotation('Error Deleting Modifier "' .. Modifier .. '".')
	end

	ReloadModifiers()
end

function CustomModifiers:DeleteCategory(Category, All)
	if All then
		for CategoryData in pairs(Modifiers.categories) do
			CategoryData = nil
		end
		Connotation("Deleted All Categories.")
	elseif Category and Modifiers.categories[Category] then
		Modifiers.categories[Category] = nil
		Connotation('Deleted Category "' .. Category .. '".')
	else
		Connotation('Error Deleting Category "' .. Category .. '".')
	end

	ReloadModifiers()
end

function CustomModifiers:DeleteFloor(Floor, All)
	if Floor and AccessibleFloors[Floor] then
		shared.CustomFloors -= 1
		CreateElevator.Floors.Visible = shared.CustomFloors <= 101
		AccessibleFloors[Floor] = nil
		Connotation('Deleted Floor "' .. Floor .. '".')
		ReloadModifiers()
	else
		Connotation('Error Deleting Floor "' .. Floor .. '".')
	end
end

function CustomModifiers:RestoreModifier(Modifier, All)
	if All then
		Modifiers.mods = shared.EveryModifier
		Connotation("Restored All Modifiers.")
	elseif Modifier and not Modifiers.mods[Modifier] then
		Modifiers.mods[Modifier] = shared.EveryModifier[Modifier]
		Connotation('Restored Modifier "' .. Modifier .. '".')
	else
		Connotation('Error Restoring Modifier "' .. Modifier .. '".')
	end

	ReloadModifiers()
end

function CustomModifiers:RestoreCategory(Category, All)
	if All then
		Modifiers.categories = shared.EveryCategory
		Connotation("Restored All Categories.")
	elseif Category and not Modifiers.categories[Category] then
		Modifiers.categories[Category] = shared.EveryCategory[Category]
		Connotation('Restored Category "' .. Category .. '".')
	else
		Connotation('Error Restoring Category "' .. Category .. '".')
	end

	ReloadModifiers()
end

function CustomModifiers:RestoreFloor(Floor)
	if Floor and not AccessibleFloors[Floor] and shared.EveryFloor[Floor] then
		shared.CustomFloors += 1
		CreateElevator.Floors.Visible = shared.CustomFloors <= 101
		AccessibleFloors[Floor] = shared.EveryFloor[Floor]
		Connotation('Restored Floor "' .. Floor .. '".')
		ReloadModifiers()
	else
		Connotation('Error Restoring Floor "' .. Floor .. '".')
	end
end

function CustomModifiers:CreateModifier(Arguements)
	Modifiers.mods[Arguements.Title] = CreateModifier({
		Title = Arguements.Title,
		Desc = Arguements.Desc,
		Color = Arguements.Color,
		Category = Arguements.Category,
		Sort = Arguements.Sort,
		Merge = Arguements.Merge,
		Bonus = Arguements.Bonus,
		Solo = Arguements.Solo,
		Penalties = Arguements.Penalties,
		Unlock = Arguements.Unlock,
		Activation = Arguements.Activation
	})

	shared.CustomModifiers[Arguements.Title] = Arguements.Title
	shared.EveryModifier[Arguements.Title] = Modifiers.mods[Arguements.Title]
	Connotation('Created Modifier "' .. Arguements.Title .. '".')
	ReloadModifiers()
end

function CustomModifiers:CreateCategory(Arguements)
	Modifiers.categories[Arguements.Title] = CreateCategory({
		Name = Arguements.Title,
		Sort = Arguements.Sort, 
		Color = Arguements.Color
	})

	shared.EveryCategory[Arguements.Title] = Modifiers.categories[Arguements.Title]
	Connotation('Created Category "' .. Arguements.Title .. '".')
	ReloadModifiers()
end

function CustomModifiers:CreateFloor(Arguements)
	AccessibleFloors[Arguements.Title] = CreateFloor({
		Name = Arguements.Title,
		Title = Arguements.Title,
		Image = Arguements.Image,
		Font = Arguements.Font,
		FontColor = Arguements.FontColor,
		Theme = Arguements.Theme,
		Requires = Arguements.Requires,
		Sort = Arguements.Sort,
		Moddable = Arguements.Moddable
	})

	CreateElevator.Floors.Visible = shared.CustomFloors <= 101
	shared.EveryFloor[Arguements.Title] = AccessibleFloors[Arguements.Title]
	Connotation('Created Floor "' .. Arguements.Title .. '".')
	ReloadModifiers()
end

function CustomModifiers:ModifierExists(Modifier)
	return Modifiers.mods[Modifier] and true or false
end

function CustomModifiers:CategoryExists(Category)
	return Modifiers.categories[Category] and true or false
end

function CustomModifiers:FloorExists(Floor)
	return AccessibleFloors[Floor] and true or false
end

function CustomModifiers:GetModifierCount()
	local Amount = 0

	for _ in pairs(Modifiers.mods) do
		Amount += 1
	end

	return Amount
end

function CustomModifiers:GetCategoryCount()
	local Amount = 0

	for _ in pairs(Modifiers.categories) do
		Amount += 1
	end

	return Amount
end

function CustomModifiers:GetFloorCount()
	local Amount = 0

	for _ in pairs(AccessibleFloors) do
		Amount += 1
	end

	return Amount
end

function CustomModifiers:ToggleConnotations(Force)
	shared.ToggleConnotations = Force or not shared.ToggleConnotations
end

CustomModifiers:CreateCategory({
	Title = "Example Category",
	Sort = -1,
	Color = Color3.fromRGB(255, 222, 189)
})

CustomModifiers:CreateModifier({
	Title = "Example",
	Desc = "This is an example custom modifier!",
	Color = Color3.fromRGB(255, 222, 189),
	Category = "Example Category",
	Sort = -2,
	Merge = nil,
	Bonus = 9999,
	Solo = false,
	Penalties = {
		NoRift = true, 
		NoProgress = true
	},
	Unlock = "Join",
	Activation = [[
		print("Custom Code Logic In Here!")
	]]
})

CustomModifiers:CreateFloor({
	Title = "Example Floor",
	Image = "rbxassetid://18992618548",
	Font = Enum.Font.Oswald,
	FontColor = Color3.fromRGB(85, 170, 0),
	Theme = Color3.fromRGB(171, 241, 194),
	Sort = 1,
	Requires = {
		NeedAll = false,
		Achievements = {
			"Join",
			"SpecialQATester"
		}
	},
	Moddable = false
})

-- Teleport Check
Players.LocalPlayer.OnTeleport:Connect(function(_, PlaceId)
	if not shared.Teleported and PlaceId == 6839171747 then
		shared.Teleported = true

		local ModifierData = {}
		
		for _, Modifier in pairs(CreateElevator.Modifiers:GetChildren()) do
			if Modifier:IsA("TextButton") and Modifier.BackgroundTransparency <= 0.7 then
				ModifierData[Modifier.Name] = Modifiers.mods[Modifier.Name]
			end
		end

		TeleportService:SetTeleportSetting("ModifierData", ModifierData)
		QueueTeleport("loadstring(game:HttpGet('https://raw.githubusercontent.com/MateiDaBest/Utilities/main/Doors/Other/CM'))()")

		for _, Modifier in pairs(ModifierData) do
			if Modifier.Activation then
				QueueTeleport(Modifier.Activation)
			end
		end
	end
end)

-- Elevator Detector
workspace.Lobby.LobbyElevators.ChildAdded:Connect(function(Elevator)
	if not Elevator:GetAttribute("KnobPercentage") then
		Elevator:SetAttribute("KnobPercentage", 0)
	end

	repeat
		task.wait()
	until Elevator:GetAttribute("Host")

	if Elevator and Elevator:GetAttribute("Host") == Players.LocalPlayer.Name then
		local ModifiersFolder = Elevator:WaitForChild("Modifiers")
		local ModifierCount = 0
		local ModifierBonus = 0
		local TempMods = MainUI.LobbyFrame:WaitForChild("TempMods")
		local BigListActive = false
		
		for _, ModifierButton in pairs(CreateElevator.Modifiers:GetChildren()) do
			if ModifierButton:IsA("TextButton") and ModifierButton.BackgroundTransparency <= 0.7 then
				ModifierCount += 1
			end
		end
		
		TempMods.Visible = ModifierCount > 0

		if ModifierCount >= 14 then
			BigListActive = true
			TempMods.BigList.Visible = true
		end

		if BigListActive then
			for _, Modifier in pairs(TempMods:GetChildren()) do
				if Modifier:IsA("TextButton") then
					Modifier.Parent = TempMods.BigList
				end
			end
		end
		
		for _, Modifier in pairs(CreateElevator.Modifiers:GetChildren()) do
			if Modifier:IsA("TextButton") and Modifier.BackgroundTransparency <= 0.7 then
				if BigListActive then
					if TempMods.BigList:FindFirstChild(Modifier.Name) then
						TempMods.BigList[Modifier.Name]:Destroy()
					end
				else
					if TempMods:FindFirstChild(Modifier.Name) then
						TempMods[Modifier.Name]:Destroy()
					end
				end

				local ModifierSettings = Modifiers.mods[Modifier.Name]
				local Template = BigListActive and TempMods.BigList.Template:Clone() or TempMods.Template:Clone()
				
				ModifierBonus += ModifierSettings.Bonus

				Template.Visible = true
				Template.Name = ModifierSettings.Name
				Template.LayoutOrder = math.abs(ModifierSettings.Sort) + math.abs(Modifiers.categories[ModifierSettings.Category].sort) * 1000
				Template.Text = ModifierSettings.Title
				Template.BackgroundColor3 = ModifierSettings.Color
				Template.TextColor3 = ModifierSettings.Color
				Template.Parent = BigListActive and TempMods.BigList or TempMods
			end
		end

		TempMods.Desc.Text = ModifierCount .. " MODIFIER ACTIVATED"
		TempMods.KnobBonus.Text = Elevator:GetAttribute("KnobPercentage") + ModifierBonus .. "%"
	end
end)

-- Create Elevator Hook
if not shared.Hooked then
	shared.Hooked = true
	local Old
	local Hook = hookmetamethod or hookfunction
	Old = Hook(game, "__namecall", function(self, ...)
		local Arguments = {...}
		local Method = getnamecallmethod()
		if tostring(self) == 'CreateElevator' and Method == "FireServer" then
			local Mods = Arguments[1].Mods
			for Index = #Mods, 1, -1 do
				local Modifier = Mods[Index]
				if shared.CustomModifiers[Modifier] then
					table.remove(Mods, Index)
				end
			end
			return Old(self, unpack(Arguments))
		end
		return Old(self, ...)
	end)
end

-- Executor Function Checks
if not QueueTeleport then
	Caption('Incompatible | Function "queue_on_teleport" is missing, Modifiers wont work in game.')
end

local HookTest = hookmetamethod or hookfunction
if not HookTest then
	Caption('Incompatible | Function "hookmetamethod" is missing, Elevators cannot be made with Custom Modifiers.')
end

-- Return Module
return CustomModifiers
